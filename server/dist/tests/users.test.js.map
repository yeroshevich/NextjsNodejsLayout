{"version":3,"sources":["../../src/tests/users.test.ts"],"sourcesContent":["import request from 'supertest';\nimport App from '@/app';\nimport { UsersController } from '@controllers/users.controller';\nimport { CreateUserDto } from '@dtos/users.dto';\nimport { User } from '@interfaces/users.interface';\nimport userModel from '@models/users.model';\n\nafterAll(async () => {\n  await new Promise<void>(resolve => setTimeout(() => resolve(), 500));\n});\n\ndescribe('Testing Users', () => {\n  describe('[GET] /users', () => {\n    it('response statusCode 200 / findAll', () => {\n      const findUser: User[] = userModel;\n\n      const app = new App([UsersController]);\n      return request(app.getServer()).get('/users').expect(200, { data: findUser, message: 'findAll' });\n    });\n  });\n\n  describe('[GET] /users/:id', () => {\n    it('response statusCode 200 / findOne', () => {\n      const userId = 1;\n      const findUser: User = userModel.find(user => user.id === userId);\n\n      const app = new App([UsersController]);\n      return request(app.getServer()).get(`/users/${userId}`).expect(200, { data: findUser, message: 'findOne' });\n    });\n  });\n\n  describe('[POST] /users', () => {\n    it('response statusCode 201 / created', async () => {\n      const userData: CreateUserDto = {\n        email: 'test@email.com',\n        password: 'q1w2e3r4',\n      };\n\n      const app = new App([UsersController]);\n      return request(app.getServer()).post('/users').send(userData).expect(201);\n    });\n  });\n\n  describe('[PUT] /users/:id', () => {\n    it('response statusCode 200 / updated', async () => {\n      const userId = 1;\n      const userData: CreateUserDto = {\n        email: 'test@email.com',\n        password: 'q1w2e3r4',\n      };\n\n      const app = new App([UsersController]);\n      return request(app.getServer()).put(`/users/${userId}`).send(userData).expect(200);\n    });\n  });\n\n  describe('[DELETE] /users/:id', () => {\n    it('response statusCode 200 / deleted', () => {\n      const userId = 1;\n\n      const app = new App([UsersController]);\n      return request(app.getServer()).delete(`/users/${userId}`).expect(200);\n    });\n  });\n});\n"],"names":["afterAll","Promise","resolve","setTimeout","describe","it","findUser","userModel","app","App","UsersController","request","getServer","get","expect","data","message","userId","find","user","id","userData","email","password","post","send","put","delete"],"mappings":"AAAA;;;;kDAAoB;4CACJ;iCACgB;mDAGV;;;;;;AAEtBA,SAAS,UAAY;IACnB,MAAM,IAAIC,QAAcC,CAAAA,UAAWC,WAAW,IAAMD,WAAW;AACjE;AAEAE,SAAS,iBAAiB,IAAM;IAC9BA,SAAS,gBAAgB,IAAM;QAC7BC,GAAG,qCAAqC,IAAM;YAC5C,MAAMC,WAAmBC,mBAAS;YAElC,MAAMC,MAAM,IAAIC,YAAG,CAAC;gBAACC,gCAAe;aAAC;YACrC,OAAOC,IAAAA,kBAAO,EAACH,IAAII,SAAS,IAAIC,GAAG,CAAC,UAAUC,MAAM,CAAC,KAAK;gBAAEC,MAAMT;gBAAUU,SAAS;YAAU;QACjG;IACF;IAEAZ,SAAS,oBAAoB,IAAM;QACjCC,GAAG,qCAAqC,IAAM;YAC5C,MAAMY,SAAS;YACf,MAAMX,WAAiBC,mBAAS,CAACW,IAAI,CAACC,CAAAA,OAAQA,KAAKC,EAAE,KAAKH;YAE1D,MAAMT,MAAM,IAAIC,YAAG,CAAC;gBAACC,gCAAe;aAAC;YACrC,OAAOC,IAAAA,kBAAO,EAACH,IAAII,SAAS,IAAIC,GAAG,CAAC,CAAC,OAAO,EAAEI,OAAO,CAAC,EAAEH,MAAM,CAAC,KAAK;gBAAEC,MAAMT;gBAAUU,SAAS;YAAU;QAC3G;IACF;IAEAZ,SAAS,iBAAiB,IAAM;QAC9BC,GAAG,qCAAqC,UAAY;YAClD,MAAMgB,WAA0B;gBAC9BC,OAAO;gBACPC,UAAU;YACZ;YAEA,MAAMf,MAAM,IAAIC,YAAG,CAAC;gBAACC,gCAAe;aAAC;YACrC,OAAOC,IAAAA,kBAAO,EAACH,IAAII,SAAS,IAAIY,IAAI,CAAC,UAAUC,IAAI,CAACJ,UAAUP,MAAM,CAAC;QACvE;IACF;IAEAV,SAAS,oBAAoB,IAAM;QACjCC,GAAG,qCAAqC,UAAY;YAClD,MAAMY,SAAS;YACf,MAAMI,WAA0B;gBAC9BC,OAAO;gBACPC,UAAU;YACZ;YAEA,MAAMf,MAAM,IAAIC,YAAG,CAAC;gBAACC,gCAAe;aAAC;YACrC,OAAOC,IAAAA,kBAAO,EAACH,IAAII,SAAS,IAAIc,GAAG,CAAC,CAAC,OAAO,EAAET,OAAO,CAAC,EAAEQ,IAAI,CAACJ,UAAUP,MAAM,CAAC;QAChF;IACF;IAEAV,SAAS,uBAAuB,IAAM;QACpCC,GAAG,qCAAqC,IAAM;YAC5C,MAAMY,SAAS;YAEf,MAAMT,MAAM,IAAIC,YAAG,CAAC;gBAACC,gCAAe;aAAC;YACrC,OAAOC,IAAAA,kBAAO,EAACH,IAAII,SAAS,IAAIe,MAAM,CAAC,CAAC,OAAO,EAAEV,OAAO,CAAC,EAAEH,MAAM,CAAC;QACpE;IACF;AACF"}